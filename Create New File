{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":90274,"databundleVersionId":10995111,"sourceType":"competition"},{"sourceId":9198133,"sourceType":"datasetVersion","datasetId":5560970}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/klyushnik/backpack-rmse-39-12213?scriptVersionId=222208308\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\nimport warnings\nimport re\nimport time\nfrom functools import partial\nfrom itertools import combinations\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nfrom IPython.display import Image\n\nfrom scipy.optimize import minimize\nfrom scipy.stats import mstats\nfrom scipy import stats\n\nfrom sklearn.linear_model import (SGDOneClassSVM, LinearRegression, Ridge, \n                                 Lasso, ElasticNet)\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import (mean_squared_error, mean_absolute_error,\n                            mean_absolute_percentage_error)\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.impute import (KNNImputer, SimpleImputer)\nfrom sklearn.ensemble import (HistGradientBoostingRegressor, ExtraTreesRegressor,\n                              GradientBoostingRegressor, IsolationForest, BaggingRegressor,\n                              RandomForestRegressor)\nfrom sklearn.model_selection import (StratifiedKFold, KFold, StratifiedGroupKFold,\n                                     RepeatedStratifiedKFold, RepeatedKFold, cross_validate,\n                                     train_test_split, TimeSeriesSplit)\nfrom sklearn.preprocessing import (LabelEncoder, QuantileTransformer, StandardScaler,\n                                   PowerTransformer, MaxAbsScaler, MinMaxScaler,\n                                   RobustScaler, PolynomialFeatures, OrdinalEncoder, \n                                    OneHotEncoder,FunctionTransformer, KBinsDiscretizer)\nfrom sklearn.feature_selection import SelectKBest,f_regression\nfrom sklearn import preprocessing\nfrom sklearn.feature_selection import (VarianceThreshold, SequentialFeatureSelector, f_regression)\nfrom sklearn.compose import ColumnTransformer\n\nimport requests\nimport holidays\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\nimport optuna\nfrom optuna.samplers import CmaEsSampler\nfrom optuna.pruners import MedianPruner\nimport optuna.visualization as vis\nfrom catboost import CatBoostRegressor\nimport xgboost as xgb\nfrom lightgbm import LGBMRegressor\nfrom mlxtend.regressor import StackingRegressor, StackingCVRegressor\n\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nsns.set_context(\"notebook\", font_scale=1.2)\nsns.set_style(\"whitegrid\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plot_numerical_features(df):\n    num_features = df.select_dtypes(include=[np.number]).columns\n    ncols = 2\n    nrows = (len(num_features) + ncols - 1) // ncols\n\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(14, 6 * nrows))\n    axes = axes.flatten()\n\n    for i, feature in enumerate(num_features):\n        sns.histplot(df[feature], bins=30, kde=True, ax=axes[i], color='skyblue', edgecolor='black')\n        axes[i].set_title(f'Distribution of {feature}', fontsize=16)\n        axes[i].set_xlabel(feature, fontsize=14)\n        axes[i].set_ylabel('Frequency', fontsize=14)\n    \n    plt.tight_layout()\n    plt.show()\n\ndef plot_numerical_boxplots(df):\n    num_features = df.select_dtypes(include=[np.number]).columns\n    ncols = 2\n    nrows = (len(num_features) + ncols - 1) // ncols\n\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(14, 6 * nrows))\n    axes = axes.flatten()\n\n    for i, feature in enumerate(num_features):\n        sns.boxplot(x=df[feature], ax=axes[i], color='lightgreen')\n        axes[i].set_title(f'Boxplot of {feature}', fontsize=16)\n        axes[i].set_xlabel(feature, fontsize=14)\n    \n    plt.tight_layout()\n    plt.show()\n\ndef plot_qq_plot(df):\n    num_features = df.select_dtypes(include=[np.number]).columns\n    ncols = 2\n    nrows = (len(num_features) + ncols - 1) // ncols\n\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(14, 6 * nrows))\n    axes = axes.flatten()\n\n    for i, feature in enumerate(num_features):\n        stats.probplot(df[feature], dist=\"norm\", plot=axes[i])\n        axes[i].set_title(f'QQ Plot of {feature}', fontsize=16)\n        axes[i].set_xlabel('Theoretical Quantiles', fontsize=14)\n        axes[i].set_ylabel('Sample Quantiles', fontsize=14)\n    \n    plt.tight_layout()\n    plt.show()\n\ndef plot_correlation_matrix(df, method='spearman'):\n    num_df = df.select_dtypes(include=[np.number])\n    \n    corr = num_df.corr(method=method)\n    plt.figure(figsize=(14, 10))\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, cbar_kws={\"shrink\": .8}, linewidths=.5)\n    plt.title(f'Correlation Matrix ({method.capitalize()} Correlation)', fontsize=18)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.show()\n\ndef plot_pairplot(df):\n    num_features = df.select_dtypes(include=[np.number]).columns\n    sns.pairplot(df[num_features], diag_kind='kde', plot_kws={'alpha': 0.6, 'edgecolor': 'k'}, height=2.5)\n    plt.suptitle('Pairplot of Numerical Features', y=1.02, fontsize=18)\n    plt.show()\n\ndef plot_categorical_features(df, ncols=2, top_n=None):\n    cat_features = df.select_dtypes(include=[object]).columns\n    nrows = (len(cat_features) + ncols - 1) // ncols\n\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(14, 6 * nrows))\n    axes = axes.flatten()\n\n    for i, feature in enumerate(cat_features):\n        if top_n is not None:\n            top_categories = df[feature].value_counts().nlargest(top_n).index\n            sns.countplot(data=df[df[feature].isin(top_categories)], y=feature, ax=axes[i], palette='viridis', order=top_categories)\n        else:\n            sns.countplot(data=df, y=feature, ax=axes[i], palette='viridis')\n        \n        axes[i].set_title(f'Count of {feature}', fontsize=16)\n        axes[i].set_xlabel('Count', fontsize=14)\n        axes[i].set_ylabel(feature, fontsize=14)\n        axes[i].tick_params(axis='y', rotation=0)\n\n    for j in range(i + 1, len(axes)):\n        fig.delaxes(axes[j])\n\n    plt.tight_layout()\n    plt.show()\n\ndef PolynomialFeatures_labeled(input_df,power):\n   \n    poly = preprocessing.PolynomialFeatures(power)\n    output_nparray = poly.fit_transform(input_df)\n    powers_nparray = poly.powers_\n\n    input_feature_names = list(input_df.columns)\n    target_feature_names = [\"Constant Term\"]\n    for feature_distillation in powers_nparray[1:]:\n        intermediary_label = \"\"\n        final_label = \"\"\n        for i in range(len(input_feature_names)):\n            if feature_distillation[i] == 0:\n                continue\n            else:\n                variable = input_feature_names[i]\n                power = feature_distillation[i]\n                intermediary_label = \"%s+%d\" % (variable,power)\n                if final_label == \"\":         #If the final label isn't yet specified\n                    final_label = intermediary_label\n                else:\n                    final_label = final_label + \"x\" + intermediary_label\n        target_feature_names.append(final_label)\n    output_df = pd.DataFrame(output_nparray, columns = target_feature_names)\n    return output_df\n\ndef variance_threshold(df,th):\n    var_thres=VarianceThreshold(threshold=th)\n    var_thres.fit(df)\n    new_cols = var_thres.get_support()\n    return df.iloc[:,new_cols]\n   \ndef optimize_memory_usage(df, print_size=True):\n    \"\"\"\n    Optimizes memory usage in a DataFrame by downcasting numeric columns.\n\n    Parameters:\n        df (pd.DataFrame): The DataFrame to optimize.\n        print_size (bool): If True, prints memory usage before and after optimization.\n\n    Returns:\n        pd.DataFrame: The optimized DataFrame.\n    \"\"\"\n    # Types for optimization.\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    \n    # Memory usage size before optimize (Mb).\n    before_size = df.memory_usage().sum() / 1024**2\n    \n    for column in df.columns:\n        column_type = df[column].dtype\n        \n        if column_type in numerics:\n            try:\n                if str(column_type).startswith('int'):\n                    df[column] = pd.to_numeric(df[column], downcast='integer')\n                else:\n                    df[column] = pd.to_numeric(df[column], downcast='float')\n                logger.info(f\"Optimized column {column}: {column_type} -> {df[column].dtype}\")\n            except Exception as e:\n                logger.error(f\"Failed to optimize column {column}: {e}\")\n    \n    # Memory usage size after optimize (Mb).\n    after_size = df.memory_usage().sum() / 1024**2\n    \n    if print_size:\n        print(\n            'Memory usage size: before {:5.4f} Mb - after {:5.4f} Mb ({:.1f}%).'.format(\n                before_size, after_size, 100 * (before_size - after_size) / before_size\n            )\n        )\n    \n    return df","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Welcom to my notebook","metadata":{}},{"cell_type":"markdown","source":"Welcome to my github - https://github.com/Alexsandrrus/projekts-Kaggle","metadata":{}},{"cell_type":"markdown","source":"![backpackforlife-2048px-goruck-3x2-1.jpg?auto=webp&quality=75&width=1024](https://cdn.thewirecutter.com/wp-content/media/2023/12/backpackforlife-2048px-goruck-3x2-1.jpg?auto=webp&quality=75&width=1024)","metadata":{}},{"cell_type":"markdown","source":"**Evaluation**\n**Root Mean Squared Error (RMSE)**\n\nSubmissions are scored on the root mean squared error. RMSE is defined as:\n\n\n![Screen-Shot-2020-11-10-at-8.06.16-AM-500x159.png](https://c3.ai/wp-content/uploads/2020/11/Screen-Shot-2020-11-10-at-8.06.16-AM-500x159.png)\n\n\n**We will predict the price of a backpack depending on many features**","metadata":{},"attachments":{"ece5a833-61f6-44cd-bb3a-a63a31ba893b.png":{"image/png":"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"},"bcf44686-64a1-4b5c-9bc8-a07dcb49a85b.png":{"image/png":"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"}}},{"cell_type":"markdown","source":"# Load data","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/playground-series-s5e2/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s5e2/test.csv')\noriginal_data = pd.read_csv('/kaggle/input/student-bag-price-prediction-dataset/Noisy_Student_Bag_Price_Prediction_Dataset.csv')\n\ntrain.shape, test.shape, original_data.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"original_data = original_data.dropna()\ntrain = pd.concat([train, original_data], axis=0).reset_index(drop=True)\n\ntrain.shape, test.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train = optimize_memory_usage(train)\ntest = optimize_memory_usage(test)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.describe().T","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"duplicates = train.duplicated()\nprint(f\"Number of duplicates: {duplicates.sum()}\")\n\ntrain = train.drop_duplicates()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in train.columns:\n    pct_missing = np.mean(train[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test = test.drop(['id'], axis =1)\ntrain = train.drop(['id'], axis =1)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"plot_numerical_features(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_numerical_boxplots(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_correlation_matrix(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_pairplot(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_categorical_features(train)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Make some Piplines","metadata":{}},{"cell_type":"code","source":"def preproc(df):\n    \n    median_weight = df[\"Weight Capacity (kg)\"].median()\n    df[\"Weight Capacity (kg)\"] = (\n        df[\"Weight Capacity (kg)\"].fillna(median_weight)\n    )\n    \n    conditions = [\n        (df[\"Weight Capacity (kg)\"] <= 5),\n        (df[\"Weight Capacity (kg)\"]  > 5) & (df[\"Weight Capacity (kg)\"] <= 15),\n        (df[\"Weight Capacity (kg)\"]  > 15) & (df[\"Weight Capacity (kg)\"] <= 20),\n        (df[\"Weight Capacity (kg)\"]  > 20) & (df[\"Weight Capacity (kg)\"] <= 25),\n        (df[\"Weight Capacity (kg)\"] > 25)\n    ]\n    choices = ['Light', 'Middle', 'Light_heavy', 'Middel_heavy','Heavy']\n    df['Weight_Class'] = np.select(conditions, choices, default='')\n    \n    df[\"Weight Capacity (kg)\"] = df[\"Weight Capacity (kg)\"].astype(\"float64\")\n    df['Weight_Class'] = df['Weight_Class'].astype(\"category\")\n    df[df.select_dtypes(include=[object]).columns] = df[df.select_dtypes(include=[object]).columns].fillna(\"None\")\n    df[df.select_dtypes(include=[object]).columns] = df[df.select_dtypes(include=[object]).columns].astype(\"category\")\n    return df","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"preproc(train)\npreproc(test)\n\ntrain.shape, test.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"num_f = ['Compartments', 'Weight Capacity (kg)']\nohe_f = ['Brand', 'Material', 'Size', 'Color', 'Style', 'Waterproof', 'Weight_Class']\nord_f = ['Laptop Compartment']\n\n\nohe_pipe = Pipeline(\n    [\n        ('imputer_ohe', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),\n        ('ohe', OneHotEncoder(drop='first', handle_unknown='ignore', sparse_output=False)),\n        ('imputer_ohe_after', SimpleImputer(missing_values=np.nan, strategy='most_frequent'))\n    ]\n)\n\nord_pipe = Pipeline(\n    [\n        ('imputer_before', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),\n        ('ord', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)),  \n        ('simpleImputer_after', SimpleImputer(missing_values=np.nan, strategy='most_frequent'))\n    ]\n)\n\nnum_pipe = Pipeline(\n    [\n        ('imputer', SimpleImputer(strategy='median')),  \n        ('scaler', StandardScaler())\n    ]\n)\n\n# num_pipe_poly = Pipeline(\n#     [\n#         ('imputer', SimpleImputer(strategy='median')),\n#         ('poly', PolynomialFeatures(degree=2, include_bias=False)),\n#         ('scaler', StandardScaler())\n#     ]\n# )\n\n\npreprocessor = ColumnTransformer(\n    [\n        ('ohe', ohe_pipe, ohe_f),\n        ('ord', ord_pipe, ord_f),\n        ('num', num_pipe, num_f),\n        # ('num_pipe_poly', num_pipe_poly, num_f)\n        \n    ], \n    remainder='passthrough'\n) \n\nprint(preprocessor)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# X and y make transform","metadata":{}},{"cell_type":"code","source":"X = train.drop(columns=['Price'])\ny = train['Price']\n\nX_transformed = preprocessor.fit_transform(X, y)\ntest_transformed = preprocessor.transform(test)\n\nX = pd.DataFrame(X_transformed, columns=preprocessor.get_feature_names_out())\ntest = pd.DataFrame(test_transformed, columns=preprocessor.get_feature_names_out())\n\nX = variance_threshold(X,0.01)\nlist_name = (X.columns)\ntest = test[list_name]\n\nX.shape, y.shape, test.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Optimize parameters","metadata":{}},{"cell_type":"code","source":"def rmse(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\ndef objective(trial):\n    depth = trial.suggest_int('depth', 4, 14)\n    learning_rate = trial.suggest_loguniform('learning_rate', 1e-4, 1e-1)\n    iterations = trial.suggest_int('iterations', 100, 2000)\n    l2_leaf_reg = trial.suggest_int('l2_leaf_reg', 1, 10)\n    bagging_temperature = trial.suggest_uniform('bagging_temperature', 0, 1)\n    border_count = trial.suggest_int('border_count', 1, 255)\n    random_strength = trial.suggest_int('random_strength', 1, 10)\n    early_stopping_rounds = trial.suggest_int('early_stopping_rounds', 10, 50)\n\n    model = CatBoostRegressor(\n        depth=depth,\n        learning_rate=learning_rate,\n        iterations=iterations,\n        l2_leaf_reg=l2_leaf_reg,\n        bagging_temperature=bagging_temperature,\n        border_count=border_count,\n        random_strength=random_strength,\n        early_stopping_rounds=early_stopping_rounds,\n        silent=True\n    )\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]  \n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\n        model.fit(X_train, y_train, eval_set=(X_test, y_test), verbose=False)\n        preds = model.predict(X_test)\n        score = rmse(y_test, preds)\n        scores.append(score)\n\n    return np.mean(scores)\n\nstudy = optuna.create_study(direction='minimize')\n\nstudy.optimize(objective, n_trials=50)\n\ncat_param = study.best_params\n\nprint(\"Best parameters found: \", cat_param)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def objective(trial):\n    \n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 100, 2000),\n        'max_depth': trial.suggest_int('max_depth', 3, 14),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n        'subsample': trial.suggest_uniform('subsample', 0.5, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.5, 1.0),\n        'gamma': trial.suggest_uniform('gamma', 0, 5),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-4, 1e2),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-4, 1e2),\n    }\n\n    model = xgb.XGBRegressor(**params, silent=True)\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\n        model.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=False)\n        preds = model.predict(X_test)\n        score = rmse(y_test, preds)\n        scores.append(score)\n\n    return np.mean(scores)\n\nstudy = optuna.create_study(direction='minimize')\n\nstudy.optimize(objective, n_trials=50)\n\nxgb_param = study.best_params\n\nprint(\"Best parameters found: \", xgb_param)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.883Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def objective(trial):\n    params = {\n        'n_estimators': trial.suggest_int('n_estimators', 100, 2000),\n        'max_depth': trial.suggest_int('max_depth', -1, 14),  \n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n        'num_leaves': trial.suggest_int('num_leaves', 20, 150),\n        'min_child_samples': trial.suggest_int('min_child_samples', 1, 100),\n        'subsample': trial.suggest_uniform('subsample', 0.5, 1.0),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.5, 1.0),\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-4, 1e2),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-4, 1e2),\n    }\n\n    model = LGBMRegressor(**params, verbose=-1)\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\n        model.fit(X_train, y_train, eval_set=[(X_test, y_test)])\n        preds = model.predict(X_test)\n        score = rmse(y_test, preds)\n        scores.append(score)\n\n    return np.mean(scores)\n\nstudy = optuna.create_study(direction='minimize')\n\nstudy.optimize(objective, n_trials=50)\n\nlgb_param = study.best_params\n\nprint(\"Best parameters found: \", lgb_param)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.883Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def objective(trial):\n    params = {\n        'max_iter': trial.suggest_int('max_iter', 100, 2000),\n        'max_depth': trial.suggest_int('max_depth', 1, 14),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-4, 1e-1),\n        'l2_regularization': trial.suggest_loguniform('l2_regularization', 1e-4, 1e2),\n        'max_leaf_nodes': trial.suggest_int('max_leaf_nodes', 2, 100),\n        'min_samples_leaf': trial.suggest_int('min_samples_leaf', 1, 100),\n    }\n\n    model = HistGradientBoostingRegressor(**params)\n\n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    scores = []\n\n    for train_index, test_index in kf.split(X):\n        X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n        y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n\n        model.fit(X_train, y_train)\n        preds = model.predict(X_test)\n        score = rmse(y_test, preds)\n        scores.append(score)\n\n    return np.mean(scores)\n\nstudy = optuna.create_study(direction='minimize')\n\nstudy.optimize(objective, n_trials=50)\n\nhgb_param = study.best_params\n\nprint(\"Best parameters found: \", hgb_param)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.883Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# K-fold","metadata":{}},{"cell_type":"code","source":"xgb_p =  {'n_estimators': 1589, 'max_depth': 3, 'learning_rate': 0.017361813430665254, 'subsample': 0.8887776309294646,\n          'colsample_bytree': 0.5612498118208982,'gamma': 0.6648708112620045, 'reg_alpha': 13.31662979961265,\n          'reg_lambda': 0.30189200565420315}\n\nlgb_p = {'n_estimators': 466, 'max_depth': 3, 'learning_rate': 0.0478290225344182,\n         'num_leaves': 59, 'min_child_samples': 28, 'subsample': 0.514524340076117,\n         'colsample_bytree': 0.6145309145618922, 'reg_alpha': 0.00012178647606478384,\n         'reg_lambda': 0.006638026244134063}","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.883Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"fold = 5\nFOLDs = KFold(n_splits=fold, shuffle=True)\n\noof_cat, predictions_cat = np.zeros(len(X)), np.zeros(len(test))\noof_xgb, predictions_xgb = np.zeros(len(X)), np.zeros(len(test))\noof_lgb, predictions_lgb = np.zeros(len(X)), np.zeros(len(test))\noof_hgb, predictions_hgb = np.zeros(len(X)), np.zeros(len(test))\noof_ridge, predictions_ridge = np.zeros(len(X)), np.zeros(len(test)), \noof_rf, predictions_rf = np.zeros(len(X)), np.zeros(len(test))\noof_lr,  predictions_lr  = np.zeros(len(X)), np.zeros(len(test))\noof_xgb1, predictions_xgb1 = np.zeros(len(X)), np.zeros(len(test))\noof_lgb1, predictions_lgb1 = np.zeros(len(X)), np.zeros(len(test))\n\nfor fold_, (trn_idx, val_idx) in enumerate(FOLDs.split(X, y)):\n    X.iloc[trn_idx], y.iloc[trn_idx]\n    X.iloc[val_idx], y.iloc[val_idx]\n\n    # CatBoostRegressor\n    cat_model = CatBoostRegressor(**cat_param, \n                                  random_state = 42,\n                                  verbose=0)\n    cat_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_cat[val_idx] = cat_model.predict(X.iloc[val_idx])\n    predictions_cat += cat_model.predict(test) / FOLDs.n_splits\n    cat_score = mean_squared_error(y.iloc[val_idx], oof_cat[val_idx], squared=False)\n    print('Fold', fold_, ' CatBoostRegressor oof RMSE is ---', cat_score)\n\n    # XGBRegressor\n    xgb_model = xgb.XGBRegressor(**xgb_param,\n                                random_state = 42)\n    xgb_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_xgb[val_idx] = xgb_model.predict(X.iloc[val_idx])\n    predictions_xgb += xgb_model.predict(test)/ FOLDs.n_splits\n    xgb_score = mean_squared_error(y.iloc[val_idx], oof_xgb[val_idx], squared=False)\n    print('Fold', fold_, ' XGBRegressor oof RMSE is ---', xgb_score)\n\n    # LGBMRegressor\n    lgb_model = LGBMRegressor(**lgb_param,\n                              random_state = 42,\n                              verbose=-1)\n    lgb_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_lgb[val_idx] = lgb_model.predict(X.iloc[val_idx])\n    predictions_lgb += lgb_model.predict(test) / FOLDs.n_splits\n    lgb_score = mean_squared_error(y.iloc[val_idx], oof_lgb[val_idx], squared=False)\n    print('Fold', fold_, ' LGBMRegressor oof RMSE is ---', lgb_score)\n\n    # HistGradientBoostingRegressor\n    hgb_model = HistGradientBoostingRegressor(**hgb_param,\n                                              random_state=42)\n    hgb_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_hgb[val_idx] = hgb_model.predict(X.iloc[val_idx])\n    predictions_hgb += hgb_model.predict(test) / FOLDs.n_splits\n    hgb_score = mean_squared_error(y.iloc[val_idx], oof_hgb[val_idx], squared=False)\n    print('Fold', fold_, ' HistGradientBoostingRegressor oof RMSE is ---', hgb_score)\n\n    # Ridge\n    ridge_model = Ridge(alpha=1.0, fit_intercept=True, solver='auto')\n    ridge_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_ridge[val_idx] = ridge_model.predict(X.iloc[val_idx])\n    predictions_ridge += ridge_model.predict(test) / FOLDs.n_splits\n    ridge_score = mean_squared_error(y.iloc[val_idx], oof_ridge[val_idx], squared=False)\n    print('Fold', fold_, ' Ridge oof RMSE is ---', ridge_score)\n\n    # RandomForestRegressor\n    rf_model = RandomForestRegressor(   n_estimators=500,        \n                                        max_depth=5,             \n                                        min_samples_leaf=20,     \n                                        random_state=42\n                                    )\n    rf_model.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_rf[val_idx] = rf_model.predict(X.iloc[val_idx])\n    predictions_rf += rf_model.predict(test) / FOLDs.n_splits  \n    rf_score = mean_squared_error(y.iloc[val_idx], oof_rf[val_idx], squared=False)\n    print('Fold', fold_, ' RandomForestRegressor oof RMSE is ---', rf_score)\n\n    # XGBRegressor1\n    xgb_model1 = xgb.XGBRegressor(**xgb_p,\n                                random_state = 42)\n    xgb_model1.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_xgb1[val_idx] = xgb_model1.predict(X.iloc[val_idx])\n    predictions_xgb1 += xgb_model1.predict(test)/ FOLDs.n_splits\n    xgb_score1 = mean_squared_error(y.iloc[val_idx], oof_xgb[val_idx], squared=False)\n    print('Fold', fold_, ' XGBRegressor 1 oof RMSE is ---', xgb_score1)\n\n    # LGBMRegressor1\n    lgb_model1 = LGBMRegressor(**lgb_p,\n                              random_state = 42,\n                              verbose=-1)\n    lgb_model1.fit(X.iloc[trn_idx], y.iloc[trn_idx])\n    oof_lgb1[val_idx] = lgb_model1.predict(X.iloc[val_idx])\n    predictions_lgb1 += lgb_model1.predict(test) / FOLDs.n_splits\n    lgb_score1 = mean_squared_error(y.iloc[val_idx], oof_lgb[val_idx], squared=False)\n    print('Fold', fold_, ' LGBMRegressor oof RMSE is ---', lgb_score1)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.883Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Blend work","metadata":{}},{"cell_type":"code","source":"blend_df = pd.DataFrame({'1': oof_cat,\n                         '2': oof_xgb,\n                         '3': oof_lgb,\n                         '4': oof_hgb,\n                         '5': oof_ridge,\n                         '6': oof_rf,\n                         '7': oof_xgb1,\n                         '8': oof_lgb1\n                         })\n\nblend_test_df = pd.DataFrame({  '1': predictions_cat,  \n                                '2': predictions_xgb, \n                                '3': predictions_lgb, \n                                '4': predictions_hgb, \n                                '5': predictions_ridge, \n                                '6': predictions_rf,\n                                '7': predictions_xgb1,\n                                '8': predictions_lgb1\n                        })\n\ndef calculate_rmse(weights, blend_df, y_):\n    weighted_predictions = np.dot(blend_df, weights)\n    return np.sqrt(mean_squared_error(y, weighted_predictions))\n\ndef constraint(weights):\n    return np.sum(weights) - 1 \n\ninitial_weights = np.array([0.2] * blend_df.shape[1])  \n\nconstraints = {'type': 'eq', 'fun': constraint}\nbounds = [(0, 1) for _ in range(blend_df.shape[1])]  \n\nresult = minimize(calculate_rmse, initial_weights, args=(blend_df, y), \n                  method='SLSQP', bounds=bounds, constraints=constraints)\n\noptimal_weights = result.x\noptimal_rmse = result.fun\n\nprint(f\"Optimal weights: {optimal_weights}\")\nprint(f\"Best RMSE: {optimal_rmse:.4f}\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.884Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Submit","metadata":{}},{"cell_type":"code","source":"sample = pd.read_csv('/kaggle/input/playground-series-s5e2/sample_submission.csv')\nsample['Price'] = np.dot(blend_test_df, optimal_weights)\nsample.to_csv('submission.csv', index=False)\nsample.shape","metadata":{"trusted":true,"execution":{"execution_failed":"2025-02-12T09:19:32.884Z"}},"outputs":[],"execution_count":null}]}